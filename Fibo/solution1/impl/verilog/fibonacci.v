// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="fibonacci,hls_ip_2019_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=5.242000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=301,HLS_SYN_LUT=351,HLS_VERSION=2019_2}" *)

module fibonacci (
        ap_clk,
        ap_rst_n,
        s_axi_AXILiteS_AWVALID,
        s_axi_AXILiteS_AWREADY,
        s_axi_AXILiteS_AWADDR,
        s_axi_AXILiteS_WVALID,
        s_axi_AXILiteS_WREADY,
        s_axi_AXILiteS_WDATA,
        s_axi_AXILiteS_WSTRB,
        s_axi_AXILiteS_ARVALID,
        s_axi_AXILiteS_ARREADY,
        s_axi_AXILiteS_ARADDR,
        s_axi_AXILiteS_RVALID,
        s_axi_AXILiteS_RREADY,
        s_axi_AXILiteS_RDATA,
        s_axi_AXILiteS_RRESP,
        s_axi_AXILiteS_BVALID,
        s_axi_AXILiteS_BREADY,
        s_axi_AXILiteS_BRESP
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;
parameter    C_S_AXI_AXILITES_DATA_WIDTH = 32;
parameter    C_S_AXI_AXILITES_ADDR_WIDTH = 5;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_AXILITES_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input   s_axi_AXILiteS_AWVALID;
output   s_axi_AXILiteS_AWREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_AWADDR;
input   s_axi_AXILiteS_WVALID;
output   s_axi_AXILiteS_WREADY;
input  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_WDATA;
input  [C_S_AXI_AXILITES_WSTRB_WIDTH - 1:0] s_axi_AXILiteS_WSTRB;
input   s_axi_AXILiteS_ARVALID;
output   s_axi_AXILiteS_ARREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_ARADDR;
output   s_axi_AXILiteS_RVALID;
input   s_axi_AXILiteS_RREADY;
output  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_RDATA;
output  [1:0] s_axi_AXILiteS_RRESP;
output   s_axi_AXILiteS_BVALID;
input   s_axi_AXILiteS_BREADY;
output  [1:0] s_axi_AXILiteS_BRESP;

 reg    ap_rst_n_inv;
wire   [31:0] entre;
reg    sortie_ap_vld;
reg   [31:0] entre_read_reg_123;
(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [0:0] icmp_ln14_fu_100_p2;
reg   [0:0] icmp_ln14_reg_128;
wire   [31:0] F2_fu_111_p2;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln16_fu_106_p2;
wire   [31:0] i_fu_117_p2;
reg   [31:0] F0_reg_41;
reg   [31:0] F0_0_reg_53;
reg   [31:0] F2_0_reg_65;
reg   [31:0] i_0_reg_76;
reg   [31:0] ap_phi_mux_storemerge_phi_fu_91_p4;
reg   [31:0] storemerge_reg_87;
reg   [1:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
end

fibonacci_AXILiteS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_AXILITES_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_AXILITES_DATA_WIDTH ))
fibonacci_AXILiteS_s_axi_U(
    .AWVALID(s_axi_AXILiteS_AWVALID),
    .AWREADY(s_axi_AXILiteS_AWREADY),
    .AWADDR(s_axi_AXILiteS_AWADDR),
    .WVALID(s_axi_AXILiteS_WVALID),
    .WREADY(s_axi_AXILiteS_WREADY),
    .WDATA(s_axi_AXILiteS_WDATA),
    .WSTRB(s_axi_AXILiteS_WSTRB),
    .ARVALID(s_axi_AXILiteS_ARVALID),
    .ARREADY(s_axi_AXILiteS_ARREADY),
    .ARADDR(s_axi_AXILiteS_ARADDR),
    .RVALID(s_axi_AXILiteS_RVALID),
    .RREADY(s_axi_AXILiteS_RREADY),
    .RDATA(s_axi_AXILiteS_RDATA),
    .RRESP(s_axi_AXILiteS_RRESP),
    .BVALID(s_axi_AXILiteS_BVALID),
    .BREADY(s_axi_AXILiteS_BREADY),
    .BRESP(s_axi_AXILiteS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .entre(entre),
    .sortie(ap_phi_mux_storemerge_phi_fu_91_p4),
    .sortie_ap_vld(sortie_ap_vld)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln14_fu_100_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        F0_0_reg_53 <= 32'd0;
    end else if (((icmp_ln16_fu_106_p2 == 1'd0) & (icmp_ln14_reg_128 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        F0_0_reg_53 <= F0_reg_41;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln14_fu_100_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        F0_reg_41 <= 32'd1;
    end else if (((icmp_ln16_fu_106_p2 == 1'd0) & (icmp_ln14_reg_128 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        F0_reg_41 <= F2_fu_111_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln14_fu_100_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        F2_0_reg_65 <= 32'd0;
    end else if (((icmp_ln16_fu_106_p2 == 1'd0) & (icmp_ln14_reg_128 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        F2_0_reg_65 <= F2_fu_111_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln14_fu_100_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_reg_76 <= 32'd2;
    end else if (((icmp_ln16_fu_106_p2 == 1'd0) & (icmp_ln14_reg_128 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i_0_reg_76 <= i_fu_117_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln16_fu_106_p2 == 1'd1) & (icmp_ln14_reg_128 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        storemerge_reg_87 <= F2_0_reg_65;
    end else if (((icmp_ln14_fu_100_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        storemerge_reg_87 <= 32'd1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        entre_read_reg_123 <= entre;
        icmp_ln14_reg_128 <= icmp_ln14_fu_100_p2;
    end
end

always @ (*) begin
    if (((icmp_ln16_fu_106_p2 == 1'd1) & (icmp_ln14_reg_128 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_phi_mux_storemerge_phi_fu_91_p4 = F2_0_reg_65;
    end else begin
        ap_phi_mux_storemerge_phi_fu_91_p4 = storemerge_reg_87;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & ((icmp_ln16_fu_106_p2 == 1'd1) | (icmp_ln14_reg_128 == 1'd1)))) begin
        sortie_ap_vld = 1'b1;
    end else begin
        sortie_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & ((icmp_ln16_fu_106_p2 == 1'd1) | (icmp_ln14_reg_128 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign F2_fu_111_p2 = (F0_0_reg_53 + F0_reg_41);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign i_fu_117_p2 = (i_0_reg_76 + 32'd1);

assign icmp_ln14_fu_100_p2 = ((entre == 32'd1) ? 1'b1 : 1'b0);

assign icmp_ln16_fu_106_p2 = (($signed(i_0_reg_76) > $signed(entre_read_reg_123)) ? 1'b1 : 1'b0);

endmodule //fibonacci
